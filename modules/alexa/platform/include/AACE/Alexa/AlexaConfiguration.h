/*
 * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#ifndef AACE_ALEXA_ALEXA_CONFIGURATION_H
#define AACE_ALEXA_ALEXA_CONFIGURATION_H

#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <memory>
#include <chrono>

#include "AACE/Core/EngineConfiguration.h"

/** @file */

namespace aace {
namespace alexa {
namespace config {

/**
 * A factory interface for creating Alexa configuration objects
 */
class AlexaConfiguration {
public:

    /**
     * Factory method used to programmatically generate device info configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code{.json}
     * {
     *   "deviceInfo":
     *   {
     *     "deviceSerialNumber": "<DEVICE_SERIAL_NUMBER>"
     *     "clientId": "<CLIENT_ID>",
     *     "productId": "<PRODUCT_ID>"
     *   }
     * }
     * @endcode
     *
     * @param [in] deviceSerialNumber The device serial number used to authorize the client with AVS
     * @param [in] clientId The client ID used to authorize the client with AVS
     * @param [in] productId The product ID used to authorize the client with AVS
     */
    static std::shared_ptr<aace::core::config::EngineConfiguration> createDeviceInfoConfig( const std::string& deviceSerialNumber, const std::string& clientId, const std::string& productId );
    
    /**
     * Factory method used to programmatically generate alerts configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code{.json}
     * {
     *   "alertsCapabilityAgent":
     *   {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>"
     *   }
     * }
     * @endcode
     *
     * @param [in] databaseFilePath The file path to the SQLite database used to store persistent alerts data.
     * The database will be created on initialization if it does not already exist.
     */
    static std::shared_ptr<aace::core::config::EngineConfiguration> createAlertsConfig( const std::string& databaseFilePath );
    
    /**
     * Factory method used to programmatically generate notifications configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code{.json}
     * {
     *   "notifications":
     *   {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>"
     *   }
     * }
     * @endcode
     *
     * @param [in] databaseFilePath The file path to the SQLite database used to store persistent notifications data.
     * The database will be created on initialization if it does not already exist.
     */
    static std::shared_ptr<aace::core::config::EngineConfiguration> createNotificationsConfig( const std::string& databaseFilePath );
    
    /**
     * Factory method used to programmatically generate certified sender configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code{.json}
     * {
     *   "certifiedSender":
     *   {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>"
     *   }
     * }
     * @endcode
     *
     * @param [in] databaseFilePath The file path to the SQLite database used to store persistent certified sender data.
     * The database will be created on initialization if it does not already exist.
     */
    static std::shared_ptr<aace::core::config::EngineConfiguration> createCertifiedSenderConfig( const std::string& databaseFilePath );

    /**
     * Factory method used to programmatically generate CURL configuration data.
     *
     * The 'libCurlUtils' sub-component of the global configuration supports the following options:
     * - CURLOPT_CAPATH If present, specifies a value for the libcurl property CURLOPT_CAPATH.
     * - CURLOPT_INTERFACE if present, specifies a value for the libcurl property CURLOPT_INTERFACE.
     *
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code{.json}
     * {
     *     "libcurlUtils" : {
     *         "CURLOPT_CAPATH" : "<CA_CERTIFICATES_FILE_PATH>"
     *         "CURLOPT_INTERFACE" : "<NETWORK_INTERFACE_NAME>"
     *     }
     * }
     * @endcode
     *
     * @param [in] certsPath The file path to the directory holding CA certificates
     * @param [in] iface The specific network interface to use. This can be a network interface name, an IP address or a host name.
     * Default to the system's primary network interface.
     */
    static std::shared_ptr<aace::core::config::EngineConfiguration> createCurlConfig( const std::string &certsPath, const std::string &iface = "" );

    /**
     * Factory method used to programmatically generate settings configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code{.json}
     * {
     *   "settings": {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>",
     *     "defaultAVSClientSettings": {
     *        "locale": "<LOCALE>"
     *     }
     *   }
     * }
     * @endcode
     *
     * @param [in] databaseFilePath The file path to the SQLite database used to store persistent settings data.
     * The database will be created on initialization if it does not already exist.
     * @param [in] locale The current locale setting on the client. Default to "en-US".
     */
    static std::shared_ptr<aace::core::config::EngineConfiguration> createSettingsConfig( const std::string& databaseFilePath, const std::string& locale = "en-US" );

    /**
     * Factory method used to programmatically generate misc storage configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code{.json}
     * {
     *   "miscDatabase":
     *   {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>",
     *   }
     * }
     * @endcode
     *
     * @param [in] databaseFilePath The file path to the SQLite database used to store persistent misc storage data.
     * The database will be created on initialization if it does not already exist.
     */
    static std::shared_ptr<aace::core::config::EngineConfiguration> createMiscStorageConfig( const std::string& databaseFilePath );

    /**
     * Factory method used to programmatically generate system configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code{.json}
     * {
     *   "aace.alexa": {
     *      "system": {
     *          "firmwareVersion": "<FIRMWARE_VERSION>"
     *      }
     *   }
     * }
     * @endcode
     *
     * @param [in] firmwareVersion The firmware version of the client device
     */
    static std::shared_ptr<aace::core::config::EngineConfiguration> createSystemConfig( uint32_t firmwareVersion );

    /**
     * Factory method used to programmatically generate encoder configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code{.json}
     * {
     *   "aace.alexa": {
     *      "speechRecognizer": {
     *          "encoder": {
     *               "name": "<ENCODER_NAME>"
     *          }
     *      }
     *   }
     * }
     * @endcode
     *
     * @param [in] encoderName The encoder codec name to be used
     */
    static std::shared_ptr<aace::core::config::EngineConfiguration> createSpeechRecognizerConfig( const std::string& encoderName );

    /**
     * enum specifying the configurable TemplateRuntime timeout.
     */
    enum class TemplateRuntimeTimeoutType {
        /**
         *  Display Card timeout in ms when Alexa completes TTS
         */
        DISPLAY_CARD_TTS_FINISHED_TIMEOUT,

        /**
         *  Display Card timeout in ms when AudioPlayback Completes.
         */
        DISPLAY_CARD_AUDIO_PLAYBACK_FINISHED_TIMEOUT,

        /**
         *  Display Card timeout in ms when AudioPlayback Stopped or Paused.
         */
        DISPLAY_CARD_AUDIO_PLAYBACK_STOPPED_PAUSED_TIMEOUT,

    };

    /**
    * Identifies a Template Runtime configuration with a type and value pair
    */
    using TemplateRuntimeTimeout = std::pair<TemplateRuntimeTimeoutType, std::chrono::milliseconds>;

    /**
     * Factory method used to programmatically generate template runtime configuration data.
     * This is an optional configuration. Following are the accepted keys and their description.
     * - displayCardTTSFinishedTimeout If present, specifies the values in milli seconds to control the timeout of display card at the end of Alexa TTS.
     * - displayCardAudioPlaybackFinishedTimeout If present, specifies the values in milli seconds to control the timeout of display card at the FINISHED state of AudioPlayback.
     * - displayCardAudioPlaybackStoppedPausedTimeout If present, specifies the values in milli seconds to control the timeout of display card at STOP or PAUSE state of AudioPlayback.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration:
     *
     * @code{.json}
     * {
     *   "templateRuntimeCapabilityAgent": {
     *      "displayCardTTSFinishedTimeout": <TIMEOUT_IN_MS>,
     *      "displayCardAudioPlaybackFinishedTimeout": <TIMEOUT_IN_MS>,
     *      "displayCardAudioPlaybackStoppedPausedTimeout": <TIMEOUT_IN_MS>
     *   }
     * }
     * @endcode
     *
     * @param [in] timeoutList A list of @c TemplateRuntimeTimeout type and value pairs
     *
     */
    static std::shared_ptr<aace::core::config::EngineConfiguration> createTemplateRuntimeTimeoutConfig( std::initializer_list<TemplateRuntimeTimeout> timeoutList );
    
    /**
     * Factory method used to programmatically generate external media player configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code{.json}
     * {
     *   "aace.alexa": {
     *      "externalMediaPlayer": {
     *          "agent": "<agent>"
     *      }
     *   }
     * }
     * @endcode
     *
     * @param [in] agent The external media player agent
     */
    static std::shared_ptr<aace::core::config::EngineConfiguration> createExternalMediaPlayerConfig( const std::string& agent );
};

} // aace::alexa::config
} // aace::alexa
} // aace

#endif // AACE_ALEXA_ALEXA_CONFIGURATION_H
